#status = error
#dest = err
#name = PropertiesConfig


#1.property設定(log folder,log naming, log layout pattern)
#2.各 appender 設定
#3.各 logger & level 設定
#4. rootLogger 設定

# Define a property called "path" that defaults to ${sys:user.home}/myapp if ${sys:catalina.base} is not defined
# Generally all Log4j2 lookups follow this pattern: ${type:key:-defaultValue}.
property.path = ${sys:catalina.base:-${sys:user.home}/myapp}
#只設定 catalina.base 用以下設定
#property.path = ${sys:catalina.base}
#只設定 user.home底下的myapp folder 用以下設定，logging 時會自動建立 myapp folder
#property.path = ${sys:user.home}/myapp
property.filename = ${path}/logs/rolling/rollinglog.log
property.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} [%level] - [%t] %c{2}.%M %msg %ex%n
# pattern rules
#%d{yyyy-MM-dd HH:mm:ss.SSS}: This prints the date and time of the log event in the format of "year-month-day hour:minute:second.millisecond", using a 24-hour clock.
#[%-5level]: This prints the log level with a width of 5 characters, left-aligned, and enclosed in square brackets.
#[%t]: This prints the name of the thread that generated the log event, enclosed in square brackets.
#%c{2}.%M: This prints the name of the logger that generated the log event, up to two components, followed by a dot, and then the name of the method that generated the log event.
#%msg: This prints the actual message being logged.
#%ex%n: This prints the stack trace of any exception associated with the log event, followed by a newline character.

#Putting it all together, the pattern will generate a log entry that looks something like this:
#[DEBUG] 2022-04-01 14:30:45.123 [main] com.example.MyClass.myMethod This is a log message. java.lang.Exception: Exception message. Stack trace...

#
#filter.threshold.type = ThresholdFilter
#filter.threshold.level = debug

appender.console.type = Console
appender.console.name = CONSOLE
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = ${layout.pattern}


appender.file.type = File
appender.file.name = LOGFILE
#=logs/log4j.log 會在 project 根目錄建立 logs/log4j.log
#=target/logs/log4j.log 會在 project target 底下建立 log 檔。但如果是 web app, 就找不到
	#appender.file.fileName=logs/log4j.log
	#appender.file.fileName=target/logs/log4j.log
appender.file.fileName = ${path}/logs/log4j.log
appender.file.layout.type = PatternLayout
appender.file.layout.pattern = ${layout.pattern}
appender.file.filter.threshold.type = ThresholdFilter
appender.file.filter.threshold.level = debug
#appender.file.filter.threshold.level = error #真的 logfile 內，只剩 error log, main & spring 的 log 都沒有

appender.rolling.type = RollingFile
appender.rolling.name = RollingFile
#從 property.filename 取得 ${filename}
appender.rolling.fileName = ${filename}
#要產生壓縮檔，用 .log.gz
#appender.rolling.filePattern = ${path}/logs/rolling/%d{yyyy-MM-dd-HH.mm.ss}-%i.log.gz
#不要產生壓縮檔，用 .log 
appender.rolling.filePattern = ${path}/logs/rolling/%d{yyyy-MM-dd-HH.mm.ss}-%i.log
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = ${layout.pattern}
appender.rolling.policies.type = Policies
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
# time.interval: 是依 filePattern 之 %d 的最小時間單位而定
appender.rolling.policies.time.interval = 300
appender.rolling.policies.time.modulate = true
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size = 5MB
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.max = 5

#log4j.logger.org.springframework=INFO ##useless##

#在 rootLogger =.. 那行有設 DEBUG 有用，這邊設的似乎無用？測試看來沒效!
#logging.level.root=WARN
#logging.level.root=DEBUG ##測試看來沒效!##

# hibernate 設定DEBUG似乎沒用, hibernate 仍然只產生CRUD紀錄，沒有多的
#logging.level.org.hibernate=error

#以下寫法似乎不 work
#logging.level.org.springframework.web=DEBUG
#logging.level.org.springframework=DEBUG


#suggested by chatGPT, works
#設定logger name 跟 level 就有效。改成DEBUG 有效。
logger.springframework.name=org.springframework
logger.springframework.level=INFO

#測試只對單一controller 記log, work
#logger.testcontroller.name=main.controller.TestLog4j2Controller
#logger.testcontroller.level=DEBUG

#測試對 所有main 開頭的 package 記log, work
logger.main.name=main
logger.main.level=TRACE
#
#logger.rolling = debug, RollingFile
#logger.rolling.name = com.example.my.app
#logger.rolling.additivity = false

#目前下方設 rootLogger level 才有效
#rootLogger = CONSOLE, LOGFILE, RollingFile
rootLogger = INFO, CONSOLE, LOGFILE, RollingFile


#suggested by chatGPT
#rootLogger.level=DEBUG ##測試沒用!##
#rootLogger.appenderRef.CONSOLE.ref=CONSOLE
#rootLogger.appenderRef.file.ref=LOGFILE
#rootLogger.appenderRef.rolling.ref=RollingFile